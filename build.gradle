plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.11.2"
}

repositories {
    mavenCentral()
}

def allureVersion = "2.21.0",
    selenideVersion = "6.13.0",
    restAssuredVersion = "5.3.0",
    appiumVersion = "8.5.0",
    restAssured = "4.5.1",
    junitVersion = "5.8.2",
    slf4jVersion = "2.0.7",
    ownerVersion = "1.0.4",
        commonsIoVersion = "2.11.0"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.appium:java-client:8.4.0",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "org.aeonbits.owner:owner:1.0.4",
            "org.assertj:assertj-core:3.24.2",
            "org.junit.jupiter:junit-jupiter:5.9.2",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.appium:java-client:8.4.0",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "commons-io:commons-io:$commonsIoVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.appium:java-client:8.4.0",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "org.assertj:assertj-core:3.24.2"

    )
}

dependencies {
    implementation ('io.qameta.allure:allure-rest-assured:2.21.0',
            'com.github.javafaker:javafaker:1.0.2',
            'org.projectlombok:lombok:1.18.22',
            'com.codeborne:selenide:6.12.3',
            'org.testng:testng:7.1.0'
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task steamMobile (type: Test) {
    useJUnitPlatform{
        includeTags "steamMobile"
    }
}
task android(type: Test) {
    useJUnitPlatform {
        includeTags "android"
    }
}
